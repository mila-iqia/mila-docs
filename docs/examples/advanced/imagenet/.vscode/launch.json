{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            // Loosely based on https://medium.com/@franoisponchon/pytorch-ddp-debugging-in-vscode-4fb162eba07e
            "name": "Debug job: Single-node (torchrun)",
            "type": "debugpy",
            "request": "launch",
            // we launch a module...
            "module": "torch.distributed.run",
            "presentation": {
                "hidden": false,
                "group": "distributed",
                "order": 0
            },
            // with args...
            "args": "--nproc_per_node=${input:NumGPUs} ${file} ${command:pickArgs}",
            "console": "integratedTerminal",
            "justMyCode": false
        },
        {
            "name": "Debug job: Launch with srun (you then use \"attach debugger\" for each task)",
            "request": "launch",
            /// wacky, but it works. We just want to run this command in a bash terminal.
            "type": "node-terminal",
            // We need to set the DebugpyPort based on the local rank, otherwise different tasks on the same node will try to listen on the same port.
            // An alternative (that would also be very ugly though) would be to use srun --ntasks-per-node=1 torchrun --nprocs-per-node=X --no-python debugpy ... to run the script.
            // VSCode shows this in red with jsonc(261) error, but you can safely ignore that (I don't know how to turn off the error..)
            "command": "srun --ntasks=${input:NumGPUs} bash -c '\
                DEBUGPY_PORT=$(expr 20000 + $(echo -n $SLURM_JOB_ID | tail -c 4) + $SLURM_LOCALID) && \
                echo \"Task $SLURM_PROCID on node $SLURMD_NODENAME is waiting until the vscode debugger is attached to host $SLURMD_NODENAME at port $DEBUGPY_PORT\" && \
                uv run debugpy --listen 0.0.0.0:$DEBUGPY_PORT --wait-for-client ${file} ${input:pickArgs}'",
            ///
            "presentation": {
                "hidden": false,
                "group": "lower",
                "order": 1
            }
        },
        {
            "name": "Debug job: Launch with srun+torchrun (you then use \"attach debugger\" for each node)",
            "request": "launch",
            /// wacky, not using nodejs here, but this allows us to just run commands in the integrated (bash) terminal.
            "type": "node-terminal",
            // Here we set the port that debugpy will listen on based on the job ID.
            // It only needs to be unique for each node in this case.
            // An alternative (that would also be very ugly though) would be to use srun --ntasks-per-node=1 torchrun --nprocs-per-node=X --no-python debugpy ... to run the script.
            // VSCode shows this in red with jsonc(261) error, but you can safely ignore that.
            "command": "srun --ntasks-per-node=1 --nodes=${input:NumNodes} --ntasks=${input:NumNodes} bash -c '\
                DEBUGPY_PORT=$(expr 20000 + $(echo -n $SLURM_JOB_ID | tail -c 4)) && \
                MASTER_ADDR=$(scontrol show hostnames $SLURM_JOB_NODELIST | head -n 1) && \
                MASTER_PORT=$(expr 10000 + $(echo -n $SLURM_JOB_ID | tail -c 4)) && \
                WORLD_SIZE=${input:NumGPUs} && \
                echo \"Task $SLURM_PROCID on node $SLURMD_NODENAME is waiting until the vscode debugger is attached to host $SLURMD_NODENAME at port $DEBUGPY_PORT\" && \
                uv run debugpy --listen 0.0.0.0:$DEBUGPY_PORT --wait-for-client -m \
                torch.distributed.run --node-rank=$SLURM_NODEID --nnodes=${input:NumNodes} \
                --master-addr=$MASTER_ADDR --master-port=$MASTER_PORT --nproc-per-node=gpu \
                ${file} ${input:pickArgs}'",
            ///
            "presentation": {
                "hidden": false,
                "group": "lower",
                "order": 2
            }
        },
        {
            "name": "Debug job: Attach debugger to a running task/node",
            "type": "debugpy",
            "request": "attach",
            "connect": {
                "host": "${input:NodeHostname}",
                "port": "${input:DebugpyPort}"
            },
            "justMyCode": false,
            "presentation": {
                "hidden": false,
                "group": "lower",
                "order": 0
            }
        },
    ],
    "inputs": [
        {
            "id": "pickArgs",
            "type": "promptString",
            "description": "Command-line arguments to pass to the script",
            "default": "-vv"
        },
        {
            "id": "NumGPUs",
            "type": "pickString",
            "description": "Number of GPUs to use",
            "options": [
                "1",
                "2",
                "4",
                "8",
                "16"
            ],
            "default": "2"
        },
        {
            "id": "NodeHostname",
            "type": "promptString",
            "description": "Hostname of the node to attach to.",
            "default": "cn-"
        },
        {
            "id": "DebugpyPort",
            "type": "promptString",
            "description": "Port to attach to (to debug distributed jobs).\nShould be unique for each task within a same node. Set to <base>+$LOCAL_RANK for all tasks on all nodes.",
            "default": "22345"
        },
        {
            "id": "NumNodes",
            "type": "pickString",
            "description": "Number of Nodes to use",
            "options": [
                "1",
                "2",
                "3",
                "4",
                "8",
            ],
            "default": "2"
        },
    ],
    "compounds": []
}